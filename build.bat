REM Start script for windows
REM based on https://www.pythonguis.com/tutorials/packaging-pyqt5-pyside2-applications-windows-pyinstaller/

:::::::::::::::::::::
REM Environment setup
:::::::::::::::::::::

REM If applicable perform clean install of virtual environment 
REM call setup/create_env.bat
call activate esibd

:::::::::::::::::::::::::::
REM Sphinx -> read the docs
:::::::::::::::::::::::::::

REM use sphinx-quickstart to generate initial configuration
REM then edit docs/conf.py to customize
call rmdir /q /s docs\_build REM delete docs/_build to generate clean documentation
call rmdir /q /s esibd\docs REM delete docs/_build to generate clean documentation
REM call rm -r docs\_build REM delete docs/_build to generate clean documentation (works in powershell?)
REM -M coverage
call sphinx-build docs docs\_build
REM offline version for in app documentation (instrument computers often have no internet access)
call xcopy /i /y docs\_build esibd\docs
REM call docs\make.bat html

:::::::::::::::
REM pyinstaller
:::::::::::::::

REM Run the following line to create initial spec file
call pyinstaller start.py -n "ESIBD Explorer" --noconsole --clean --icon=esibd/media/ESIBD_Explorer.ico --add-data="docs/_build;docs" --noconfirm --additional-hooks-dir=./pyinstaller_hooks --distpath ./pyinstaller_dist
REM --add-data="media;media" --add-data="plugins;plugins" REM now subfolder of esibd
REM --additional-hooks-dir=./pyinstaller_hooks -> add any modules that plugins may require at run time
REM --onefile meant for release to make sure all dependencies are included in the exe but extracting everything from one exe on every start is unacceptably slow. For debugging use --onedir (default) Use this option only when you are sure that it does not limit performance or complicates debugging
REM --noconsole # console can be useful for debugging. start .exe from command window to keep errors visible after crash

REM Modify spec file if needed
REM check explicit use of paths relative to root

REM After modifying the spec file only use the following to not overwrite your changes.
REM call pyinstaller ESIBD_Explorer.spec
REM Note: I do not modify the spec file manually and use the one generated by the line above as it is.

::::::::
REM PyPI
::::::::

call rmdir /q /s dist
call rmdir /q /s esibd_explorer.egg-info

python -m build

REM pip install . REM test installation locally
REM python -m esibd.explorer # start gui using module

REM twine check dist/*
REM twine upload -r testpypi dist/*

REM conda create -n "estest" python=3.11
REM conda activate estest
REM pip install -i https://test.pypi.org/simple/ esibd-explorer
REM pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ esibd-explorer==0.6.8 # use pypi dependencies that are not present on testpypi 

REM twine upload dist/*

::::::::::::::::
REM InstallForge
::::::::::::::::

REM Next, create setup.exe using InstallForge
REM use EsibdExplorer.ifp and adjust absolute file paths for dependencies and setup file if applicable
REM NOTE without certificate users will see "publisher unknown" message during installation. $300 per year for certificate -> only if number of clients increases
REM NOTE https://installforge.net/support1/docs/setting-up-visual-update-express/ -> for small user groups installing from downloaded exe acceptable and less error prone (e.g. if online links should change). If applicable do manual uninstall before installing from exe to get clean installation.

cmd /k REM keep batch open to see potential build errors
