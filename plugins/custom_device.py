# pylint: disable=[missing-module-docstring] # only single class in module

from PyQt6.QtWidgets import QDialog,QLabel,QGridLayout
# Users who add custom controls can use the build-in features at their own risk.
# If you want your module to be more independent,implement your own replacement for the following imports.
from ES_IBD_controls import ESIBD_Input_Device,ESIBD_Input_Channel
from ES_IBD_core import ESIBD_Parameter,parameterDict

def initialize(esibdWindow):
    CustomInputTab(esibdWindow=esibdWindow)

class CustomInputTab(ESIBD_Input_Device):
    """A custom user control. Add your independent code here to add it to the Configuration and Management tabs"""

    def __init__(self,**kwargs):
        super().__init__(**kwargs,name = 'Custom Config',channelType = CustomConfigItem)
        self.customSetting = 'Custom/Setting'
        self.initUI()

    def initUI(self):
        # a base UI is provided by parent class,it can be extended like this if required
        self.addButton(0,5,'Custom',self.customAction,'Custom tooltip.')

    def customAction(self):
        """Execute your custom code"""
        dlg = QDialog(self)
        dlg.setWindowTitle('Custom Dialog')
        lbl = QLabel(f'This could run your custom code. The value of your custom setting is {self.custom}')
        lay = QGridLayout()
        lay.addWidget(lbl)
        dlg.setLayout(lay)
        dlg.exec()

    def apply(self,apply):
        """ Executed when values have changed.
            Should only apply channels where value has changed."""
        # for c in self.channels:
        #     pass # implement depending on hardware

    def getDefaultSettings(self):
        """ Define device specific settings that will be added to the general settings tab.
        These will be included if the settings file is deleted and automatically regenerated.
        Overwrite as needed."""
        settings = super().getDefaultSettings()
        settings['Custom/Setting'] = parameterDict(value = 100,_min = 100,_max = 10000,toolTip = 'Custom Tooltip',
                                                                                    widgetType = ESIBD_Parameter.WIDGETINT,attr = 'custom')
        return settings

class CustomConfigItem(ESIBD_Input_Channel):
    """custom channel"""

    # def __init__(self,**kwargs):
    #     super().__init__(**kwargs)

    def getDefaultChannel(self):
        channel = super().getDefaultChannel()
        channel[self.VALUE   ][ESIBD_Parameter.HEADER] = 'Unit (X)' # overwrite to change header
        self.ID = 'ID'
        channel[self.ID] = parameterDict(value = 0,widgetType = ESIBD_Parameter.WIDGETINT,advanced = True,header = 'ID',attr = 'id')
        channel = {k: channel[k] for k in [self.SELECT,self.ENABLED,self.NAME,self.VALUE,self.MIN,self.MAX,self.EQUATION,self.OPTIMIZE,self.ID,self.ACTIVE,self.REAL,self.COLOR]}
        return channel

    def finalizeInit(self,item):
        super().finalizeInit(item)
        # add custom parameters as needed,make sure they are present in your ini file and generated by makeDefault if needed.
        _id = self.getParameterByName(self.ID)
        _id.getWidget().setMinimum(-1000)
        _id.getWidget().setMaximum(+1000)
